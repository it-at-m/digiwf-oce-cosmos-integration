/*
 * sysHUB REST-API
 * The sysHUB REST API / SDK v3 is a RESTful API that provides third party teams access to sysHUB features through a standard way. This page documents all operations intended for third-party integration.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.muenchendigital.digiwf.ocecosmos.integration.gen.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.muenchendigital.digiwf.ocecosmos.integration.gen.model.StackTraceElement;
import io.muenchendigital.digiwf.ocecosmos.integration.gen.model.Throwable;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * WebException
 */


public class WebException {
  @JsonProperty("cause")
  private Throwable cause = null;

  @JsonProperty("localizedMessage")
  private String localizedMessage = null;

  @JsonProperty("message")
  private String message = null;

  @JsonProperty("stackTrace")
  private List<StackTraceElement> stackTrace = null;

  /**
   * Gets or Sets status
   */
  public enum StatusEnum {
    ACCEPTED("ACCEPTED"),
    ALREADY_REPORTED("ALREADY_REPORTED"),
    BAD_GATEWAY("BAD_GATEWAY"),
    BAD_REQUEST("BAD_REQUEST"),
    BANDWIDTH_LIMIT_EXCEEDED("BANDWIDTH_LIMIT_EXCEEDED"),
    CHECKPOINT("CHECKPOINT"),
    CONFLICT("CONFLICT"),
    CONTINUE("CONTINUE"),
    CREATED("CREATED"),
    DESTINATION_LOCKED("DESTINATION_LOCKED"),
    EXPECTATION_FAILED("EXPECTATION_FAILED"),
    FAILED_DEPENDENCY("FAILED_DEPENDENCY"),
    FORBIDDEN("FORBIDDEN"),
    FOUND("FOUND"),
    GATEWAY_TIMEOUT("GATEWAY_TIMEOUT"),
    GONE("GONE"),
    HTTP_VERSION_NOT_SUPPORTED("HTTP_VERSION_NOT_SUPPORTED"),
    IM_USED("IM_USED"),
    INSUFFICIENT_SPACE_ON_RESOURCE("INSUFFICIENT_SPACE_ON_RESOURCE"),
    INSUFFICIENT_STORAGE("INSUFFICIENT_STORAGE"),
    INTERNAL_SERVER_ERROR("INTERNAL_SERVER_ERROR"),
    I_AM_A_TEAPOT("I_AM_A_TEAPOT"),
    LENGTH_REQUIRED("LENGTH_REQUIRED"),
    LOCKED("LOCKED"),
    LOOP_DETECTED("LOOP_DETECTED"),
    METHOD_FAILURE("METHOD_FAILURE"),
    METHOD_NOT_ALLOWED("METHOD_NOT_ALLOWED"),
    MOVED_PERMANENTLY("MOVED_PERMANENTLY"),
    MOVED_TEMPORARILY("MOVED_TEMPORARILY"),
    MULTIPLE_CHOICES("MULTIPLE_CHOICES"),
    MULTI_STATUS("MULTI_STATUS"),
    NETWORK_AUTHENTICATION_REQUIRED("NETWORK_AUTHENTICATION_REQUIRED"),
    NON_AUTHORITATIVE_INFORMATION("NON_AUTHORITATIVE_INFORMATION"),
    NOT_ACCEPTABLE("NOT_ACCEPTABLE"),
    NOT_EXTENDED("NOT_EXTENDED"),
    NOT_FOUND("NOT_FOUND"),
    NOT_IMPLEMENTED("NOT_IMPLEMENTED"),
    NOT_MODIFIED("NOT_MODIFIED"),
    NO_CONTENT("NO_CONTENT"),
    OK("OK"),
    PARTIAL_CONTENT("PARTIAL_CONTENT"),
    PAYLOAD_TOO_LARGE("PAYLOAD_TOO_LARGE"),
    PAYMENT_REQUIRED("PAYMENT_REQUIRED"),
    PERMANENT_REDIRECT("PERMANENT_REDIRECT"),
    PRECONDITION_FAILED("PRECONDITION_FAILED"),
    PRECONDITION_REQUIRED("PRECONDITION_REQUIRED"),
    PROCESSING("PROCESSING"),
    PROXY_AUTHENTICATION_REQUIRED("PROXY_AUTHENTICATION_REQUIRED"),
    REQUESTED_RANGE_NOT_SATISFIABLE("REQUESTED_RANGE_NOT_SATISFIABLE"),
    REQUEST_ENTITY_TOO_LARGE("REQUEST_ENTITY_TOO_LARGE"),
    REQUEST_HEADER_FIELDS_TOO_LARGE("REQUEST_HEADER_FIELDS_TOO_LARGE"),
    REQUEST_TIMEOUT("REQUEST_TIMEOUT"),
    REQUEST_URI_TOO_LONG("REQUEST_URI_TOO_LONG"),
    RESET_CONTENT("RESET_CONTENT"),
    SEE_OTHER("SEE_OTHER"),
    SERVICE_UNAVAILABLE("SERVICE_UNAVAILABLE"),
    SWITCHING_PROTOCOLS("SWITCHING_PROTOCOLS"),
    TEMPORARY_REDIRECT("TEMPORARY_REDIRECT"),
    TOO_EARLY("TOO_EARLY"),
    TOO_MANY_REQUESTS("TOO_MANY_REQUESTS"),
    UNAUTHORIZED("UNAUTHORIZED"),
    UNAVAILABLE_FOR_LEGAL_REASONS("UNAVAILABLE_FOR_LEGAL_REASONS"),
    UNPROCESSABLE_ENTITY("UNPROCESSABLE_ENTITY"),
    UNSUPPORTED_MEDIA_TYPE("UNSUPPORTED_MEDIA_TYPE"),
    UPGRADE_REQUIRED("UPGRADE_REQUIRED"),
    URI_TOO_LONG("URI_TOO_LONG"),
    USE_PROXY("USE_PROXY"),
    VARIANT_ALSO_NEGOTIATES("VARIANT_ALSO_NEGOTIATES");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("status")
  private StatusEnum status = null;

  @JsonProperty("suppressed")
  private List<Throwable> suppressed = null;

  @JsonProperty("timestamp")
  private Date timestamp = null;

  public WebException cause(Throwable cause) {
    this.cause = cause;
    return this;
  }

   /**
   * Get cause
   * @return cause
  **/
  @Valid
  @Schema(description = "")
  public Throwable getCause() {
    return cause;
  }

  public void setCause(Throwable cause) {
    this.cause = cause;
  }

  public WebException localizedMessage(String localizedMessage) {
    this.localizedMessage = localizedMessage;
    return this;
  }

   /**
   * Get localizedMessage
   * @return localizedMessage
  **/
  @Schema(description = "")
  public String getLocalizedMessage() {
    return localizedMessage;
  }

  public void setLocalizedMessage(String localizedMessage) {
    this.localizedMessage = localizedMessage;
  }

  public WebException message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @Schema(description = "")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public WebException stackTrace(List<StackTraceElement> stackTrace) {
    this.stackTrace = stackTrace;
    return this;
  }

  public WebException addStackTraceItem(StackTraceElement stackTraceItem) {
    if (this.stackTrace == null) {
      this.stackTrace = new ArrayList<>();
    }
    this.stackTrace.add(stackTraceItem);
    return this;
  }

   /**
   * Get stackTrace
   * @return stackTrace
  **/
  @Valid
  @Schema(description = "")
  public List<StackTraceElement> getStackTrace() {
    return stackTrace;
  }

  public void setStackTrace(List<StackTraceElement> stackTrace) {
    this.stackTrace = stackTrace;
  }

  public WebException status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public WebException suppressed(List<Throwable> suppressed) {
    this.suppressed = suppressed;
    return this;
  }

  public WebException addSuppressedItem(Throwable suppressedItem) {
    if (this.suppressed == null) {
      this.suppressed = new ArrayList<>();
    }
    this.suppressed.add(suppressedItem);
    return this;
  }

   /**
   * Get suppressed
   * @return suppressed
  **/
  @Valid
  @Schema(description = "")
  public List<Throwable> getSuppressed() {
    return suppressed;
  }

  public void setSuppressed(List<Throwable> suppressed) {
    this.suppressed = suppressed;
  }

  public WebException timestamp(Date timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @Valid
  @Schema(description = "")
  public Date getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Date timestamp) {
    this.timestamp = timestamp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebException webException = (WebException) o;
    return Objects.equals(this.cause, webException.cause) &&
        Objects.equals(this.localizedMessage, webException.localizedMessage) &&
        Objects.equals(this.message, webException.message) &&
        Objects.equals(this.stackTrace, webException.stackTrace) &&
        Objects.equals(this.status, webException.status) &&
        Objects.equals(this.suppressed, webException.suppressed) &&
        Objects.equals(this.timestamp, webException.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cause, localizedMessage, message, stackTrace, status, suppressed, timestamp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebException {\n");
    
    sb.append("    cause: ").append(toIndentedString(cause)).append("\n");
    sb.append("    localizedMessage: ").append(toIndentedString(localizedMessage)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    stackTrace: ").append(toIndentedString(stackTrace)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    suppressed: ").append(toIndentedString(suppressed)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
